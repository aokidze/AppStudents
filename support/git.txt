 


            ### 1. **Проверьте статус репозитория**

Прежде чем вносить изменения, всегда полезно проверить, в каком состоянии находится ваш репозиторий:

```powershell
git status
```

Эта команда покажет:
- Какие файлы были изменены (modified), добавлены (new file) или удалены.
- На какой ветке вы находитесь.
- Если есть файлы, которые ещё не были добавлены в индекс для коммита.

            ### 2. **Внесение изменений в файлы**

После того как вы сделали какие-либо изменения в проекте (например, отредактировали код, добавили новый файл или изменили конфигурации), нужно зафиксировать эти изменения с помощью Git.

            ### 3. **Добавление изменений в индекс (staging)**

Когда вы вносите изменения в файлы, Git не отслеживает их до тех пор, пока вы не добавите их в индекс. Для этого используйте команду `git add`.

- Чтобы добавить все изменения (новые файлы и изменения в существующих):

  ```powershell
  git add .
  ```

- Если вы хотите добавить только конкретный файл, укажите его имя:

  ```powershell
  git add путь/к/файлу
  ```

            ### 4. **Создание коммита**

После того как вы добавили файлы в индекс с помощью `git add`, вы можете создать коммит. Коммит — это точка в истории вашего репозитория, которая сохраняет изменения.

- Чтобы создать коммит, используйте команду `git commit`. Укажите короткое, но информативное сообщение о том, что было изменено:

  ```powershell
  git commit -m "Описание изменений, что было сделано"
  ```

  Например:

  ```powershell
  git commit -m "Добавлен новый функционал для обработки ошибок"
  ```

  Это сохранит ваши изменения в локальном репозитории.

            ### 5. **Просмотр истории коммитов**

Если вы хотите увидеть все свои коммиты и понять, что изменялось в репозитории, используйте команду:

```powershell
git log
```

Для более компактного и понятного отображения истории используйте:

```powershell
git log --oneline
```

            ### 6. **Отправка изменений на GitHub (push)**

Когда вы сделали локальный коммит, следующим шагом будет отправка изменений в удалённый репозиторий (на GitHub).

- Чтобы отправить изменения на удалённый репозиторий, используйте команду `git push`:

  ```powershell
  git push origin main
  ```

  - `origin` — это имя вашего удалённого репозитория.
  - `main` — это ветка, в которую вы отправляете изменения (если у вас основная ветка называется по-другому, например, `master`, используйте это название).

            ### 7. **Создание новых веток (если нужно)**

Если вам нужно работать над новой фичей или исправлением и хотите изолировать изменения от основной ветки, создайте новую ветку:

1. Создайте новую ветку:

   ```powershell
   git checkout -b имя_ветки
   ```

   Например:

   ```powershell
   git checkout -b feature/login-page
   ```

2. После этого внесите изменения, сделайте коммиты и отправьте ветку на GitHub:

   ```powershell
   git push origin feature/login-page
   ```

            ### 8. **Слияние веток (если нужно)**

Если вы создавали новую ветку, например, для новой фичи, и теперь хотите объединить её с основной веткой (`main`), выполните следующие шаги:

1. Перейдите в основную ветку:

   ```powershell
   git checkout main
   ```

2. Объедините (слияние) изменения из вашей рабочей ветки:

   ```powershell
   git merge feature/login-page
   ```

3. Если слияние прошло успешно, отправьте изменения на удалённый репозиторий:

   ```powershell
   git push origin main
   ```

            ### 9. **Использование `git pull` для обновления локальной копии**

Если кто-то другой работает с этим репозиторием или вы хотите синхронизировать свои локальные изменения с удалённым репозиторием, используйте `git pull`:

```powershell
git pull origin main
```

Это подтянет все изменения с удалённого репозитория в вашу локальную копию. Если возникнут конфликты, вам нужно будет их разрешить.

### Полная последовательность работы с Git

1. Проверьте статус репозитория:

   ```powershell
   git status
   ```

2. Добавьте изменения в индекс:

   ```powershell
   git add .
   ```

3. Создайте коммит с описанием изменений:

   ```powershell
   git commit -m "Описание изменений"
   ```

4. Отправьте изменения на GitHub:

   ```powershell
   git push origin main
   ```

5. (Если нужно) Синхронизируйте изменения с удалённым репозиторием:

   ```powershell
   git pull origin main
   ```

---

